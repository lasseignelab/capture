#!/bin/bash

# Configure the runtime environment for jobs.
#
# Configuration can be set at multiple levels including the organization,
# environment, user, and project.  The configuration files will be sourced
# in this order:
#
# 1) All projects should contain a config/pipeline.sh file.  This file
#    is generated by the cap new command.  It contains the project name
#    environment variable.
#
# 2) Default values for CAP_* environment variables are set by the
#    framework and are relative to the project directory.
#
# 3) An organization can provide an /etc/caprc file to set configuration
#    defaults for an entire organization.
#
# 4) A user can provide a ~/.caprc file in their home directory to specify
#    configuration specific to their projects.  If a user works in a lab
#    or on a team then this is a good place to source in a .caprc from
#    a lab/team shared location.
#
# 5) A project can provide a .caprc file in the project root directory
#    to set configuration specific to the project and relevant to all
#    users and environments.
#
# 6) A project can provide environment specific configuration by including
#    a file named <environment-name>.rc in the config/environments
#    directory, e.g. default.rc.  The default environment is "default" and
#    the cap new command automatically generates a default.sh file in the
#    config/environments folder. The file used is based on the CAP_ENV
#    environment variable.  This variable would generally be set in the
#    ~/.caprc file but could also be an environment variable set in the
#    user's shell configuration.

# Set the default environment if one doesn't exist.
if [ -z "$CAP_ENV" ]; then
  CAP_ENV="default"
fi

CAP_PROJECT_PATH=$(realpath ".")

# Bootstrap the framework runtime environment.
if [ -f "$CAP_PROJECT_PATH/config/pipeline.sh" ]; then
  # shellcheck disable=SC1091
  source "$CAP_PROJECT_PATH/config/pipeline.sh"
fi

# Set all the default paths.
CAP_LOGS_PATH=$(realpath "logs")
CAP_DATA_PATH=$(realpath "data")
CAP_RESULTS_PATH=$(realpath "results")
CAP_CONTAINER_PATH=$(realpath "bin/container")
CAP_CONDA_PATH=$(realpath "bin/conda")

# Set all default values
CAP_CONTAINER_TYPE="docker"

: "${CAP_ETC_RC_PATH:=/etc/caprc}"
# Load the configuration files.
if [ -f "$CAP_ETC_RC_PATH" ]; then
  # shellcheck disable=SC1091
  source "$CAP_ETC_RC_PATH"
fi
: "${CAP_HOME_RC_PATH:=$HOME/.caprc}"
if [ -f "$CAP_HOME_RC_PATH" ]; then
  # shellcheck disable=SC1090
  source "$CAP_HOME_RC_PATH"
fi
if [ -f "$CAP_PROJECT_PATH/.caprc" ]; then
  # shellcheck disable=SC1091
  source "$CAP_PROJECT_PATH/.caprc"
fi
if [ -n "$environment_override" ]; then
  CAP_ENV="$environment_override"
fi
if [ -f "$CAP_PROJECT_PATH/config/environments/$CAP_ENV.sh" ]; then
  source "$CAP_INSTALL_PATH/lib/environment_functions.sh"
  # shellcheck disable=SC1090
  source "$CAP_PROJECT_PATH/config/environments/$CAP_ENV.sh"
fi

# Make sure all the configured paths exist.
if [ ! -d "$CAP_LOGS_PATH" ]; then
  mkdir -p "$CAP_LOGS_PATH"
fi
if [ ! -d "$CAP_DATA_PATH" ]; then
  mkdir -p "$CAP_DATA_PATH"
fi
if [ ! -d "$CAP_RESULTS_PATH" ]; then
  mkdir -p "$CAP_RESULTS_PATH"
fi
if [ ! -d "$CAP_CONTAINER_PATH" ]; then
  mkdir -p "$CAP_CONTAINER_PATH"
fi
if [ ! -d "$CAP_CONDA_PATH" ]; then
  mkdir -p "$CAP_CONDA_PATH"
fi

# Make all the variables visible in the runtime environment
export CAP_ENV
export CAP_PROJECT_NAME
export CAP_PROJECT_PATH
export CAP_LOGS_PATH
export CAP_DATA_PATH
export CAP_RESULTS_PATH
export CAP_CONTAINER_PATH
export CAP_CONDA_PATH
export CAP_RANDOM_SEED
export CAP_CONTAINER_TYPE
